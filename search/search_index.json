{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"HybridTestFramework \u00b6 Architecture \u00b6 Supported Platforms \u00b6 This framework supports WebUi automation across a variety of browsers like Chrome, Firefox, IE, no only limited to this but extended to test rest api, security and visual testing. Capabilities \u00b6 Cross browser testing support Added browserstack support for CrossBrowser testing Running tests in docker containers selenium grid Running tests in AWS DeviceFarm selenium grid Running tests in selenium server in docker containers Security testing using OWASP, running in docker container Api testing support using RestAssured Visual regression testing using percy.io Accessibility testing using axe-selenium Stubbed api testing using WireMock Can send logs to ElasticSearch for kibana dashboard visualization Database testing support Kafka testing support Kubernetes support JenkinsExecution \u00b6 GridServer 2.0 \u00b6 Allure Reporting \u00b6 Gradle Report \u00b6 Azure devops TestResults \u00b6 BrowserStack Dashboard \u00b6 LogsView \u00b6","title":"Home"},{"location":"#hybridtestframework","text":"","title":"HybridTestFramework"},{"location":"#architecture","text":"","title":"Architecture"},{"location":"#supported-platforms","text":"This framework supports WebUi automation across a variety of browsers like Chrome, Firefox, IE, no only limited to this but extended to test rest api, security and visual testing.","title":"Supported Platforms"},{"location":"#capabilities","text":"Cross browser testing support Added browserstack support for CrossBrowser testing Running tests in docker containers selenium grid Running tests in AWS DeviceFarm selenium grid Running tests in selenium server in docker containers Security testing using OWASP, running in docker container Api testing support using RestAssured Visual regression testing using percy.io Accessibility testing using axe-selenium Stubbed api testing using WireMock Can send logs to ElasticSearch for kibana dashboard visualization Database testing support Kafka testing support Kubernetes support","title":"Capabilities"},{"location":"#jenkinsexecution","text":"","title":"JenkinsExecution"},{"location":"#gridserver-20","text":"","title":"GridServer 2.0"},{"location":"#allure-reporting","text":"","title":"Allure Reporting"},{"location":"#gradle-report","text":"","title":"Gradle Report"},{"location":"#azure-devops-testresults","text":"","title":"Azure devops TestResults"},{"location":"#browserstack-dashboard","text":"","title":"BrowserStack Dashboard"},{"location":"#logsview","text":"","title":"LogsView"},{"location":"api/","text":"Api Testing \u00b6 Write your first user journey web ui test \u00b6 Create new class and name as the TC00*_E2E_TEST-*** - Provide jira link in @Link - Provide all the api components as @Feature - Provide test severity and description - Write test - Use CatchBlock in try/catch section","title":"Apis"},{"location":"api/#api-testing","text":"","title":"Api Testing"},{"location":"api/#write-your-first-user-journey-web-ui-test","text":"Create new class and name as the TC00*_E2E_TEST-*** - Provide jira link in @Link - Provide all the api components as @Feature - Provide test severity and description - Write test - Use CatchBlock in try/catch section","title":"Write your first user journey web ui test"},{"location":"aws/","text":"AWS Cloud Testing \u00b6","title":"AWS"},{"location":"aws/#aws-cloud-testing","text":"","title":"AWS Cloud Testing"},{"location":"kafka/","text":"Kafka Testing \u00b6","title":"Kafka"},{"location":"kafka/#kafka-testing","text":"","title":"Kafka Testing"},{"location":"selenium/","text":"Selenium Testing \u00b6 Write your first user journey web ui test \u00b6 Create new class and name as the TC00*_E2E_TEST-*** - Provide jira link in @Link - Provide all the api components as @Feature - Provide test severity and description - Write test - Use CatchBlock in try/catch section","title":"Selenium"},{"location":"selenium/#selenium-testing","text":"","title":"Selenium Testing"},{"location":"selenium/#write-your-first-user-journey-web-ui-test","text":"Create new class and name as the TC00*_E2E_TEST-*** - Provide jira link in @Link - Provide all the api components as @Feature - Provide test severity and description - Write test - Use CatchBlock in try/catch section","title":"Write your first user journey web ui test"},{"location":"setup/","text":"Project Setup \u00b6 Install intellij https://www.jetbrains.com/idea/download/ Install docker desktop https://www.docker.com/products/docker-desktop Java JDK_11 https://adoptium.net/?variant=openjdk11 or any latest version. Gradle https://gradle.org/next-steps/?version=6.9&format=bin Allure https://github.com/allure-framework/allure2/releases/download/2.17.3/allure-2.17.3.zip Set Environment variables JAVA_HOME: Pointing to the Java SDK folder\\bin GRADLE_HOME: Pointing to Gradle directory\\bin. ALLURE_HOME: Pointing to allure directory\\bin. Java 11 JDK Installation and config \u00b6 Download Java 11 JDK from here Install downloaded Java 11 JDK. System Properties -> Environment Variables -> System Variables -> New -> JAVA_HOME and Value as C:\\Program Files\\Eclipse Adoptium\\jdk-11.0.13.8-hotspot (path where JDK is installed) System Properties -> Environment Variables -> System Variables -> Select Path and Edit -> Add %JAVA_HOME%\\bin Once Environment variables are configured, open command prompt and run java -v and echo $JAVA_HOME to check whether java version installed is returned. e.g $ java -version $ openjdk 11.0.13 2021-10-19<br/> OpenJDK Runtime Environment Temurin-11.0.13+8 (build 11.0.13+8)<br/> OpenJDK 64-Bit Server VM Temurin-11.0.13+8 (build 11.0.13+8, mixed mode) Recommended IDE \u00b6 Please install Community Edition of Intellij IDEA from here Getting Started \u00b6 ```shell script $ git clone $ cd $ import project from intellij as a gradle project $ gradle clean $ gradle build $ gradle task E2E $ gradle allureReport $ gradle allureServe ### Spawns chrome, firefox, selenium hub and OWASP proxy server ```shell script $ docker-compose up -d Complete infrastructure creation for local run \u00b6 ```shell script $ $ docker-compose -f docker-compose-infra up -d ### Spawns four additional node-chrome/firefox instances linked to the hub ```shell script $ docker-compose scale chrome=5 $ docker-compose scale firefox=5 Error Handle for dynamic classpath error in intellij: Search and modify the below line in .idea workspace.xml <component name= \"PropertiesComponent\" > <property name= \"dynamic.classpath\" value= \"true\" /> </component> Security ZAP Testing \u00b6 OWASP ZAP Download it from Github - Run it - Configure proxy: Tools -> Options -> Local Proxies. Set port to 8888 - Get API key from your ZAP instance: Tools -> Options -> API Vulnerable application - system under test - Install docker and run docker service - Run bodgeit docker container (or any app) - Make sure it's running on http://localhost:8080/bodgeit/ Selenium traffic will go through ZAP proxy in order to capture all traffic. It's not exactly necessary for the bodgeit shop, but in real-world applications spider would struggle to find URLs requiring logged in access.","title":"Setup"},{"location":"setup/#project-setup","text":"Install intellij https://www.jetbrains.com/idea/download/ Install docker desktop https://www.docker.com/products/docker-desktop Java JDK_11 https://adoptium.net/?variant=openjdk11 or any latest version. Gradle https://gradle.org/next-steps/?version=6.9&format=bin Allure https://github.com/allure-framework/allure2/releases/download/2.17.3/allure-2.17.3.zip Set Environment variables JAVA_HOME: Pointing to the Java SDK folder\\bin GRADLE_HOME: Pointing to Gradle directory\\bin. ALLURE_HOME: Pointing to allure directory\\bin.","title":"Project Setup"},{"location":"setup/#java-11-jdk-installation-and-config","text":"Download Java 11 JDK from here Install downloaded Java 11 JDK. System Properties -> Environment Variables -> System Variables -> New -> JAVA_HOME and Value as C:\\Program Files\\Eclipse Adoptium\\jdk-11.0.13.8-hotspot (path where JDK is installed) System Properties -> Environment Variables -> System Variables -> Select Path and Edit -> Add %JAVA_HOME%\\bin Once Environment variables are configured, open command prompt and run java -v and echo $JAVA_HOME to check whether java version installed is returned. e.g $ java -version $ openjdk 11.0.13 2021-10-19<br/> OpenJDK Runtime Environment Temurin-11.0.13+8 (build 11.0.13+8)<br/> OpenJDK 64-Bit Server VM Temurin-11.0.13+8 (build 11.0.13+8, mixed mode)","title":"Java 11 JDK Installation and config"},{"location":"setup/#recommended-ide","text":"Please install Community Edition of Intellij IDEA from here","title":"Recommended IDE"},{"location":"setup/#getting-started","text":"```shell script $ git clone $ cd $ import project from intellij as a gradle project $ gradle clean $ gradle build $ gradle task E2E $ gradle allureReport $ gradle allureServe ### Spawns chrome, firefox, selenium hub and OWASP proxy server ```shell script $ docker-compose up -d","title":"Getting Started"},{"location":"setup/#complete-infrastructure-creation-for-local-run","text":"```shell script $ $ docker-compose -f docker-compose-infra up -d ### Spawns four additional node-chrome/firefox instances linked to the hub ```shell script $ docker-compose scale chrome=5 $ docker-compose scale firefox=5 Error Handle for dynamic classpath error in intellij: Search and modify the below line in .idea workspace.xml <component name= \"PropertiesComponent\" > <property name= \"dynamic.classpath\" value= \"true\" /> </component>","title":"Complete infrastructure creation for local run"},{"location":"setup/#security-zap-testing","text":"OWASP ZAP Download it from Github - Run it - Configure proxy: Tools -> Options -> Local Proxies. Set port to 8888 - Get API key from your ZAP instance: Tools -> Options -> API Vulnerable application - system under test - Install docker and run docker service - Run bodgeit docker container (or any app) - Make sure it's running on http://localhost:8080/bodgeit/ Selenium traffic will go through ZAP proxy in order to capture all traffic. It's not exactly necessary for the bodgeit shop, but in real-world applications spider would struggle to find URLs requiring logged in access.","title":"Security ZAP Testing"}]}